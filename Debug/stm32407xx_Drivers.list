
stm32407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a84  08000a8c  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a84  08000a84  00010a8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a84  08000a8c  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a8c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a8c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a99  00000000  00000000  00010aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002fc  00000000  00000000  00011598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00011898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  00011960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001fb9  00000000  00000000  000119ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001136  00000000  00000000  000139a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008d5a  00000000  00000000  00014adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001d838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a6c 	.word	0x08000a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a6c 	.word	0x08000a6c

080001c8 <delay>:
#define HIGH 1
#define LOW 0
#define BTN_PRESSED LOW

void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	// this will introduce ~200ms delay when system clock is 16MHz
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GPIOBtn;

	memset(&GpioLed,0,sizeof(GpioLed));
 80001fa:	f107 030c 	add.w	r3, r7, #12
 80001fe:	220c      	movs	r2, #12
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fc06 	bl	8000a14 <memset>
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 8000208:	463b      	mov	r3, r7
 800020a:	220c      	movs	r2, #12
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fc00 	bl	8000a14 <memset>

	//this is led gpio configuration
	GpioLed.pGPIOX = GPIOD;
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <main+0x84>)
 8000216:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000218:	230c      	movs	r3, #12
 800021a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800021c:	2301      	movs	r3, #1
 800021e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000220:	2300      	movs	r3, #0
 8000222:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000224:	2300      	movs	r3, #0
 8000226:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000228:	2300      	movs	r3, #0
 800022a:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800022c:	2101      	movs	r1, #1
 800022e:	4812      	ldr	r0, [pc, #72]	; (8000278 <main+0x84>)
 8000230:	f000 f85e 	bl	80002f0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f941 	bl	80004c0 <GPIO_Init>


	//this is btn gpio configuration
	GPIOBtn.pGPIOX = GPIOD;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <main+0x84>)
 8000240:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000242:	2306      	movs	r3, #6
 8000244:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000246:	2304      	movs	r3, #4
 8000248:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800024a:	2302      	movs	r3, #2
 800024c:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	71fb      	strb	r3, [r7, #7]

	//GPIO_PeriClockControl(GPIOD,ENABLE);
	GPIO_Init(&GPIOBtn);
 8000252:	463b      	mov	r3, r7
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f933 	bl	80004c0 <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOD,GPIO_PIN_NO_12,GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	210c      	movs	r1, #12
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x84>)
 8000260:	f000 faca 	bl	80007f8 <GPIO_WriteToOutputPin>
	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI14);
 8000264:	210e      	movs	r1, #14
 8000266:	2017      	movs	r0, #23
 8000268:	f000 fb86 	bl	8000978 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	2017      	movs	r0, #23
 8000270:	f000 fafc 	bl	800086c <GPIO_IRQInterruptConfig>

    while(1);
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	40020c00 	.word	0x40020c00

0800027c <EXTI9_5_IRQHandler>:

}


void EXTI9_5_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    delay(); //200ms . wait till button de-bouncing gets over
 8000280:	f7ff ffa2 	bl	80001c8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_6); //clear the pending event from exti line
 8000284:	2006      	movs	r0, #6
 8000286:	f000 fba5 	bl	80009d4 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 800028a:	210c      	movs	r1, #12
 800028c:	4802      	ldr	r0, [pc, #8]	; (8000298 <EXTI9_5_IRQHandler+0x1c>)
 800028e:	f000 fad8 	bl	8000842 <GPIO_ToggleOutputPin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020c00 	.word	0x40020c00

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 fbab 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff91 	bl	80001f4 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	08000a8c 	.word	0x08000a8c
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	2000001c 	.word	0x2000001c

080002ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC_IRQHandler>
	...

080002f0 <GPIO_PeriClockControl>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t EnOrDi){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d162      	bne.n	80003c8 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a64      	ldr	r2, [pc, #400]	; (8000498 <GPIO_PeriClockControl+0x1a8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800030a:	4b64      	ldr	r3, [pc, #400]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a63      	ldr	r2, [pc, #396]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}

	}
}
 8000316:	e0b9      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a61      	ldr	r2, [pc, #388]	; (80004a0 <GPIO_PeriClockControl+0x1b0>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000320:	4b5e      	ldr	r3, [pc, #376]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a5d      	ldr	r2, [pc, #372]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e0ae      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a5c      	ldr	r2, [pc, #368]	; (80004a4 <GPIO_PeriClockControl+0x1b4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000336:	4b59      	ldr	r3, [pc, #356]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e0a3      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a58      	ldr	r2, [pc, #352]	; (80004a8 <GPIO_PeriClockControl+0x1b8>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800034c:	4b53      	ldr	r3, [pc, #332]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a52      	ldr	r2, [pc, #328]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e098      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a53      	ldr	r2, [pc, #332]	; (80004ac <GPIO_PeriClockControl+0x1bc>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000362:	4b4e      	ldr	r3, [pc, #312]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a4d      	ldr	r2, [pc, #308]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000368:	f043 0310 	orr.w	r3, r3, #16
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e08d      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a4f      	ldr	r2, [pc, #316]	; (80004b0 <GPIO_PeriClockControl+0x1c0>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a47      	ldr	r2, [pc, #284]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e082      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a4a      	ldr	r2, [pc, #296]	; (80004b4 <GPIO_PeriClockControl+0x1c4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800038e:	4b43      	ldr	r3, [pc, #268]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a42      	ldr	r2, [pc, #264]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e077      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a46      	ldr	r2, [pc, #280]	; (80004b8 <GPIO_PeriClockControl+0x1c8>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a3c      	ldr	r2, [pc, #240]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e06c      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a41      	ldr	r2, [pc, #260]	; (80004bc <GPIO_PeriClockControl+0x1cc>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d168      	bne.n	800048c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a37      	ldr	r2, [pc, #220]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e061      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a33      	ldr	r2, [pc, #204]	; (8000498 <GPIO_PeriClockControl+0x1a8>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80003d0:	4b32      	ldr	r3, [pc, #200]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a31      	ldr	r2, [pc, #196]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e056      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a2f      	ldr	r2, [pc, #188]	; (80004a0 <GPIO_PeriClockControl+0x1b0>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80003e6:	4b2d      	ldr	r3, [pc, #180]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a2c      	ldr	r2, [pc, #176]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003ec:	f023 0302 	bic.w	r3, r3, #2
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e04b      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <GPIO_PeriClockControl+0x1b4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a26      	ldr	r2, [pc, #152]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000402:	f023 0304 	bic.w	r3, r3, #4
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e040      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <GPIO_PeriClockControl+0x1b8>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000418:	f023 0308 	bic.w	r3, r3, #8
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e035      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a22      	ldr	r2, [pc, #136]	; (80004ac <GPIO_PeriClockControl+0x1bc>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800042e:	f023 0310 	bic.w	r3, r3, #16
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e02a      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <GPIO_PeriClockControl+0x1c0>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000444:	f023 0320 	bic.w	r3, r3, #32
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e01f      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <GPIO_PeriClockControl+0x1c4>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a10      	ldr	r2, [pc, #64]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800045a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e014      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <GPIO_PeriClockControl+0x1c8>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e009      	b.n	800048c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a10      	ldr	r2, [pc, #64]	; (80004bc <GPIO_PeriClockControl+0x1cc>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d105      	bne.n	800048c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <GPIO_PeriClockControl+0x1ac>)
 8000486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40020000 	.word	0x40020000
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40021400 	.word	0x40021400
 80004b4:	40021800 	.word	0x40021800
 80004b8:	40021c00 	.word	0x40021c00
 80004bc:	40022000 	.word	0x40022000

080004c0 <GPIO_Init>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_Init(GPIO_Handle_t* pGPIO_Handle){
 80004c0:	b480      	push	{r7}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	// 1. Configure the Mode of the GPIO Pin

	uint32_t temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d821      	bhi.n	8000518 <GPIO_Init+0x58>
		temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));  // 2x as the mode takes two bits
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOX->MODER &= ~(0x3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	4619      	mov	r1, r3
 80004f2:	2303      	movs	r3, #3
 80004f4:	408b      	lsls	r3, r1
 80004f6:	43db      	mvns	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	400a      	ands	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOX->MODER |= temp;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6819      	ldr	r1, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]

		temp = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	e0ca      	b.n	80006ae <GPIO_Init+0x1ee>
	}
	else {
			// For the interrupt modes
		if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d117      	bne.n	8000550 <GPIO_Init+0x90>
			// This is a Falling edge trigger
			// 1. Configure the FTSR (Falling Trigger Selection Register)

			EXTI->FTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000520:	4b4a      	ldr	r3, [pc, #296]	; (800064c <GPIO_Init+0x18c>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a46      	ldr	r2, [pc, #280]	; (800064c <GPIO_Init+0x18c>)
 8000532:	430b      	orrs	r3, r1
 8000534:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b45      	ldr	r3, [pc, #276]	; (800064c <GPIO_Init+0x18c>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	43d2      	mvns	r2, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a40      	ldr	r2, [pc, #256]	; (800064c <GPIO_Init+0x18c>)
 800054a:	400b      	ands	r3, r1
 800054c:	6093      	str	r3, [r2, #8]
 800054e:	e035      	b.n	80005bc <GPIO_Init+0xfc>
		}

		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b05      	cmp	r3, #5
 8000556:	d117      	bne.n	8000588 <GPIO_Init+0xc8>
			// This is a rising edge trigger
			// 1. Configure the RTSR (Rising Trigger Selection Register)

			EXTI->RTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <GPIO_Init+0x18c>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a38      	ldr	r2, [pc, #224]	; (800064c <GPIO_Init+0x18c>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800056e:	4b37      	ldr	r3, [pc, #220]	; (800064c <GPIO_Init+0x18c>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	43d2      	mvns	r2, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a32      	ldr	r2, [pc, #200]	; (800064c <GPIO_Init+0x18c>)
 8000582:	400b      	ands	r3, r1
 8000584:	60d3      	str	r3, [r2, #12]
 8000586:	e019      	b.n	80005bc <GPIO_Init+0xfc>
		}

		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b06      	cmp	r3, #6
 800058e:	d115      	bne.n	80005bc <GPIO_Init+0xfc>
			// This is a rising and falling edge trigger
			EXTI->FTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <GPIO_Init+0x18c>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a2a      	ldr	r2, [pc, #168]	; (800064c <GPIO_Init+0x18c>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <GPIO_Init+0x18c>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a25      	ldr	r2, [pc, #148]	; (800064c <GPIO_Init+0x18c>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO Port Selection in SYSCFG_EXTICR
		uint8_t index  = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	74fb      	strb	r3, [r7, #19]
		uint8_t nibble = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	74bb      	strb	r3, [r7, #18]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE (pGPIO_Handle->pGPIOX);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <GPIO_Init+0x190>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d04d      	beq.n	8000674 <GPIO_Init+0x1b4>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <GPIO_Init+0x194>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d032      	beq.n	8000648 <GPIO_Init+0x188>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <GPIO_Init+0x198>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d02b      	beq.n	8000644 <GPIO_Init+0x184>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <GPIO_Init+0x19c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d024      	beq.n	8000640 <GPIO_Init+0x180>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <GPIO_Init+0x1a0>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d01d      	beq.n	800063c <GPIO_Init+0x17c>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <GPIO_Init+0x1a4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d016      	beq.n	8000638 <GPIO_Init+0x178>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <GPIO_Init+0x1a8>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d00f      	beq.n	8000634 <GPIO_Init+0x174>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <GPIO_Init+0x1ac>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d008      	beq.n	8000630 <GPIO_Init+0x170>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <GPIO_Init+0x1b0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d101      	bne.n	800062c <GPIO_Init+0x16c>
 8000628:	2308      	movs	r3, #8
 800062a:	e024      	b.n	8000676 <GPIO_Init+0x1b6>
 800062c:	2300      	movs	r3, #0
 800062e:	e022      	b.n	8000676 <GPIO_Init+0x1b6>
 8000630:	2307      	movs	r3, #7
 8000632:	e020      	b.n	8000676 <GPIO_Init+0x1b6>
 8000634:	2306      	movs	r3, #6
 8000636:	e01e      	b.n	8000676 <GPIO_Init+0x1b6>
 8000638:	2305      	movs	r3, #5
 800063a:	e01c      	b.n	8000676 <GPIO_Init+0x1b6>
 800063c:	2304      	movs	r3, #4
 800063e:	e01a      	b.n	8000676 <GPIO_Init+0x1b6>
 8000640:	2303      	movs	r3, #3
 8000642:	e018      	b.n	8000676 <GPIO_Init+0x1b6>
 8000644:	2302      	movs	r3, #2
 8000646:	e016      	b.n	8000676 <GPIO_Init+0x1b6>
 8000648:	2301      	movs	r3, #1
 800064a:	e014      	b.n	8000676 <GPIO_Init+0x1b6>
 800064c:	40013c00 	.word	0x40013c00
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	40021c00 	.word	0x40021c00
 8000670:	40022000 	.word	0x40022000
 8000674:	2300      	movs	r3, #0
 8000676:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN(); 	// Enable the SYSCFG clock
 8000678:	4b5c      	ldr	r3, [pc, #368]	; (80007ec <GPIO_Init+0x32c>)
 800067a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067c:	4a5b      	ldr	r2, [pc, #364]	; (80007ec <GPIO_Init+0x32c>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[index] = portCode << ((nibble * 4)); // X4 for selecting the nibble
 8000684:	7c7a      	ldrb	r2, [r7, #17]
 8000686:	7cbb      	ldrb	r3, [r7, #18]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	fa02 f103 	lsl.w	r1, r2, r3
 800068e:	4a58      	ldr	r2, [pc, #352]	; (80007f0 <GPIO_Init+0x330>)
 8000690:	7cfb      	ldrb	r3, [r7, #19]
 8000692:	3302      	adds	r3, #2
 8000694:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <GPIO_Init+0x334>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a52      	ldr	r2, [pc, #328]	; (80007f4 <GPIO_Init+0x334>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure the Speed
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	799b      	ldrb	r3, [r3, #6]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOX->OSPEEDR &= ~(0x03 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	2303      	movs	r3, #3
 80006ce:	408b      	lsls	r3, r1
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOX->OSPEEDR |= temp;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6899      	ldr	r1, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

	// 3. Configure the PuPd settings
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOX->PUPDR &= ~(0x03 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	4619      	mov	r1, r3
 800070e:	2303      	movs	r3, #3
 8000710:	408b      	lsls	r3, r1
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOX->PUPDR |= temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68d9      	ldr	r1, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

	// 4. Configure the Output Type
	temp = pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOX->OTYPER &= ~(0x01 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	2301      	movs	r3, #1
 8000750:	408b      	lsls	r3, r1
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOX->OTYPER |= temp;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6859      	ldr	r1, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	430a      	orrs	r2, r1
 800076c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

	// 5. Configure the Alternate Functionality
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d131      	bne.n	80007de <GPIO_Init+0x31e>
		uint8_t index;
		uint8_t nibble;

		index  = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	743b      	strb	r3, [r7, #16]
		nibble = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	73fb      	strb	r3, [r7, #15]
		pGPIO_Handle->pGPIOX->AFR[index] &= ~(0x0F << (4 * nibble));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7c3a      	ldrb	r2, [r7, #16]
 8000792:	3208      	adds	r2, #8
 8000794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	220f      	movs	r2, #15
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	7c3a      	ldrb	r2, [r7, #16]
 80007ac:	4001      	ands	r1, r0
 80007ae:	3208      	adds	r2, #8
 80007b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOX->AFR[index] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * nibble));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7c3a      	ldrb	r2, [r7, #16]
 80007ba:	3208      	adds	r2, #8
 80007bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a5b      	ldrb	r3, [r3, #9]
 80007c4:	461a      	mov	r2, r3
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	7c3a      	ldrb	r2, [r7, #16]
 80007d6:	4301      	orrs	r1, r0
 80007d8:	3208      	adds	r2, #8
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007de:	bf00      	nop
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40013c00 	.word	0x40013c00

080007f8 <GPIO_WriteToOutputPin>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber, uint8_t Value){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
 8000804:	4613      	mov	r3, r2
 8000806:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET){
 8000808:	78bb      	ldrb	r3, [r7, #2]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d109      	bne.n	8000822 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	78fa      	ldrb	r2, [r7, #3]
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	615a      	str	r2, [r3, #20]
	}

	else {
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000820:	e009      	b.n	8000836 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	78fa      	ldrb	r2, [r7, #3]
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	43d2      	mvns	r2, r2
 8000830:	401a      	ands	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	615a      	str	r2, [r3, #20]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <GPIO_ToggleOutputPin>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber){
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	460b      	mov	r3, r1
 800084c:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	78fa      	ldrb	r2, [r7, #3]
 8000854:	2101      	movs	r1, #1
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	405a      	eors	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	615a      	str	r2, [r3, #20]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <GPIO_IRQInterruptConfig>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
// This is for the MCU's IRQ number and ARM's NVIC mapping
// ARM Side configuration
// However, the MCU only utilizes 81 IRQ for it's peripherals' interrupts in its Vector table.

	if (EnorDi == ENABLE){ // For enabling the interrupt registers
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d133      	bne.n	80008ea <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31){
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b1f      	cmp	r3, #31
 8000886:	d80a      	bhi.n	800089e <GPIO_IRQInterruptConfig+0x32>
			// IRQNumber lies in the ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000888:	4b35      	ldr	r3, [pc, #212]	; (8000960 <GPIO_IRQInterruptConfig+0xf4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a32      	ldr	r2, [pc, #200]	; (8000960 <GPIO_IRQInterruptConfig+0xf4>)
 8000898:	430b      	orrs	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96){ // for IRQs 64 - 88
			// IRQNumber lies in the ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800089c:	e059      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b1f      	cmp	r3, #31
 80008a2:	d90f      	bls.n	80008c4 <GPIO_IRQInterruptConfig+0x58>
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b3f      	cmp	r3, #63	; 0x3f
 80008a8:	d80c      	bhi.n	80008c4 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <GPIO_IRQInterruptConfig+0xf8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	f002 021f 	and.w	r2, r2, #31
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a29      	ldr	r2, [pc, #164]	; (8000964 <GPIO_IRQInterruptConfig+0xf8>)
 80008be:	430b      	orrs	r3, r1
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e046      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b3f      	cmp	r3, #63	; 0x3f
 80008c8:	d943      	bls.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b5f      	cmp	r3, #95	; 0x5f
 80008ce:	d840      	bhi.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <GPIO_IRQInterruptConfig+0xfc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a21      	ldr	r2, [pc, #132]	; (8000968 <GPIO_IRQInterruptConfig+0xfc>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	e033      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31){ // for IRQs 0 - 31
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b1f      	cmp	r3, #31
 80008ee:	d80a      	bhi.n	8000906 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <GPIO_IRQInterruptConfig+0x100>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	4611      	mov	r1, r2
 80008fe:	4a1b      	ldr	r2, [pc, #108]	; (800096c <GPIO_IRQInterruptConfig+0x100>)
 8000900:	430b      	orrs	r3, r1
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	e025      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){ // for IRQs 32 - 63
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b1f      	cmp	r3, #31
 800090a:	d90f      	bls.n	800092c <GPIO_IRQInterruptConfig+0xc0>
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b3f      	cmp	r3, #63	; 0x3f
 8000910:	d80c      	bhi.n	800092c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <GPIO_IRQInterruptConfig+0x104>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	f002 021f 	and.w	r2, r2, #31
 800091c:	2101      	movs	r1, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4611      	mov	r1, r2
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <GPIO_IRQInterruptConfig+0x104>)
 8000926:	430b      	orrs	r3, r1
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e012      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96){ // for IRQs 64 - 88
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b3f      	cmp	r3, #63	; 0x3f
 8000930:	d90f      	bls.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b5f      	cmp	r3, #95	; 0x5f
 8000936:	d80c      	bhi.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <GPIO_IRQInterruptConfig+0x108>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <GPIO_IRQInterruptConfig+0x108>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	e7ff      	b.n	8000952 <GPIO_IRQInterruptConfig+0xe6>
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000e104 	.word	0xe000e104
 8000968:	e000e108 	.word	0xe000e108
 800096c:	e000e180 	.word	0xe000e180
 8000970:	e000e184 	.word	0xe000e184
 8000974:	e000e188 	.word	0xe000e188

08000978 <GPIO_IRQPriorityConfig>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_IRQPriorityConfig (uint8_t IRQNumber, uint8_t IRQPriority){
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
	uint8_t IPR_reg = IRQNumber / 4;  			// For selecting 0 - 59 IPRx registers
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_section = IRQNumber % 4;
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * byte_section) + (8 - NO_OF_PR_BITS_IMPLEMENTED);
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	3304      	adds	r3, #4
 800099e:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + IPR_reg) |= (IRQPriority << shift_amount);
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009a8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	79b9      	ldrb	r1, [r7, #6]
 80009b0:	7b7b      	ldrb	r3, [r7, #13]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009c0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009c4:	430a      	orrs	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <GPIO_IRQHandling>:
 * @return 		- none
 *
 * @note		- none
 *
 */
void GPIO_IRQHandling(uint8_t PinNumber){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]

	if ((EXTI->PR) & (1 << PinNumber)){
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d009      	beq.n	8000a04 <GPIO_IRQHandling+0x30>
		// Clear the EXTI PR register corresponding to the pin
		// Clear by writing 1
		EXTI->PR |= (1 << PinNumber);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6153      	str	r3, [r2, #20]
	}
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40013c00 	.word	0x40013c00

08000a14 <memset>:
 8000a14:	4402      	add	r2, r0
 8000a16:	4603      	mov	r3, r0
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d100      	bne.n	8000a1e <memset+0xa>
 8000a1c:	4770      	bx	lr
 8000a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a22:	e7f9      	b.n	8000a18 <memset+0x4>

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d0d      	ldr	r5, [pc, #52]	; (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1b64      	subs	r4, r4, r5
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2600      	movs	r6, #0
 8000a30:	42a6      	cmp	r6, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4d0b      	ldr	r5, [pc, #44]	; (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	; (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 f818 	bl	8000a6c <_init>
 8000a3c:	1b64      	subs	r4, r4, r5
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2600      	movs	r6, #0
 8000a42:	42a6      	cmp	r6, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4c:	4798      	blx	r3
 8000a4e:	3601      	adds	r6, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a56:	4798      	blx	r3
 8000a58:	3601      	adds	r6, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000a84 	.word	0x08000a84
 8000a60:	08000a84 	.word	0x08000a84
 8000a64:	08000a84 	.word	0x08000a84
 8000a68:	08000a88 	.word	0x08000a88

08000a6c <_init>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr

08000a78 <_fini>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr
